---
- name: Kubernetes | Get helper.psm1 module
  win_get_url:
    url: "{{ download_links.helper_module }}"
    dest: "{{ install_path }}/{{ download_links.helper_module | basename }}"
  
- set_fact:
    helper_module_path: "{{ install_path }}/helper.psm1"

- name: Kubernetes | Get current subnet
  win_shell: |
    ipmo "{{ helper_module_path }}"
    Get-MgmtSubnet -InterfaceName *
  register: mgmtsubnet

- set_fact:
    mgmtsubnet: "{{ mgmtsubnet.stdout | trim }}"

- name: Kubernetes | Update CNI Config
  win_shell: |
    ipmo "{{ helper_module_path }}"
    Update-CNIConfig "{{ install_path }}/cni/config/cni.conf" -clusterCIDR "{{ CLUSTER_SUBNET }}" -KubeDnsServiceIP  "{{ kubernetes_info.K8S_DNS_SERVICE_IP }}" -serviceCIDR "{{ SERVICE_CLUSTER_IP_RANGE }}" -InterfaceName "*" -NetworkName "{{ networkName }}" -NetworkMode "{{ networkMode }}"
  when: CNIBINS == "cniwin"

- name: Kubernetes | Update CNI Config
  win_shell: |
    ipmo "{{ helper_module_path }}"
    Update-SDNCNIConfig "{{ install_path }}/cni/config/cni.conf" -clusterCIDR "{{ CLUSTER_SUBNET }}" -KubeDnsServiceIP  "{{ kubernetes_info.K8S_DNS_SERVICE_IP }}" -serviceCIDR "{{ SERVICE_CLUSTER_IP_RANGE }}" -InterfaceName "Ethernet 2" -NetworkName "{{ networkName }}" -NetworkMode "{{ networkMode }}"
  when: CNIBINS == "sdnms"

- name: Kubernetes | Update net-conf.json
  win_shell: |
    ipmo "{{ helper_module_path }}"
    Update-NetConfig "{{ install_path }}/net-conf.json" "{{ CLUSTER_SUBNET }}" "{{ networkName }}" "{{ networkMode }}"

- name: Kubernetes | Create /etc/kube-flannel
  win_file:
     path: "{{ kube_flannel_path }}"
     state: directory

- name: Kubernetes | Copy net-conf.json to kube-flannel dir
  win_copy:
    src: "{{ install_path }}/net-conf.json"
    dest: "{{ kube_flannel_path }}/net-conf.json"
    remote_src: True

- name: Kubernetes | Create cni containerd cni bins dir
  win_file:
    path: "{{ containerd_cni_path }}/bin"
    state: directory
  when: CONTAINER_RUNTIME == "containerd"

- name: Kubernetes | Create cni containerd cni config dir
  win_file:
    path: "{{ containerd_cni_path }}/config"
    state: directory
  when: CONTAINER_RUNTIME == "containerd"

# Is there a better way for this? (atuvenie)
- name: Kubernetes | Get cni binaries paths on remote machine
  win_find:
    paths: "{{ install_path }}/cni"
    patterns: [ '*.exe' ]
  register: cni_bins
  when: CONTAINER_RUNTIME == "containerd"

- name: Kubernetes | Move cni binaries to containerd cni path
  win_copy:
     src: "{{ item.path }}"
     dest: "{{ containerd_cni_path }}/bin/"
     remote_src: True
  with_items:  "{{ cni_bins.files }}"
  when: CONTAINER_RUNTIME == "containerd"

- name: Kubernetes | Move cni config to containerd cni path
  win_copy:
     src: "{{ install_path }}/cni/config/cni.conf"
     dest: "{{ containerd_cni_path }}/config/"
     remote_src: True
  when: CONTAINER_RUNTIME == "containerd"

- name: Kubernetes | Check if Kubelet is installed
  win_service:
    name: kubelet
  register: kubelet_service

- name: Kubelet | Remove kubelet service if it exists
  win_service:
    name: kubelet
    state: absent
  when: kubelet_service.exists

- name: Kubelet | Remove existing service wrapper config file
  win_file:
    state: absent
    path: '{{ install_path }}\kubelet-servicewrapper-config.ini'

- name: Kubelet | Docker - Create the new service wrapper config file
  win_lineinfile:
    path: '{{ install_path }}\kubelet-servicewrapper-config.ini'
    create: yes
    line: >
      log-file={{ install_path }}/kubelet.log

      service-name=kubelet

      service-command="{{ install_path }}\\kubelet.exe"
      --feature-gates="KubeletPodResources=false"
      --hostname-override="{{ ansible_hostname }}"
      --enable-debugging-handlers
      --cluster-dns="{{ kubernetes_info.K8S_DNS_SERVICE_IP }}"
      --cluster-domain="{{ kubernetes_info.K8S_DNS_DOMAIN }}"
      --pod-infra-container-image="kubeletwin/pause"
      --kubeconfig="{{ install_path }}\\kubeconfig.yaml"
      --hairpin-mode=promiscuous-bridge
      --image-pull-progress-deadline=20m
      --cgroups-per-qos=false
      --network-plugin=cni --cni-bin-dir="{{ install_path }}\\cni"
      --cni-conf-dir="{{ install_path }}\\cni\config"
      --node-ip="{{ host_public_ip }}"
      --enforce-node-allocatable=""
      --resolv-conf=""
  when: CONTAINER_RUNTIME == "docker"

- name: Kubelet | Containerd - Create the new service wrapper config file
  win_lineinfile:
    path: '{{ install_path }}\kubelet-servicewrapper-config.ini'
    create: yes
    line: >
      log-file={{ install_path }}/kubelet.log

      service-name=kubelet

      service-command="{{ install_path }}\\kubelet.exe"
      --feature-gates="KubeletPodResources=false"
      --hostname-override="{{ ansible_hostname }}"
      --enable-debugging-handlers
      --cluster-dns="{{ kubernetes_info.K8S_DNS_SERVICE_IP }}"
      --cluster-domain="{{ kubernetes_info.K8S_DNS_DOMAIN }}"
      --pod-infra-container-image="kubeletwin/pause"
      --kubeconfig="{{ install_path }}\\kubeconfig.yaml"
      --hairpin-mode=promiscuous-bridge
      --image-pull-progress-deadline=20m
      --cgroups-per-qos=false
      --node-ip="{{ host_public_ip }}"
      --enforce-node-allocatable=""
      --resolv-conf=""
      --container-runtime-endpoint=npipe:\\\\.\\pipe\containerd-containerd
      --container-runtime=remote
  when: CONTAINER_RUNTIME == "containerd"


- name: Kubelet | Create Kublet Windows service
  win_service:
    name: kubelet
    display_name: Kubernetes Kubelet
    description: Kubernetes Kubelet service
    path: >-
      "{{ install_path }}\servicewrapper.exe" --config "{{ install_path }}\kubelet-servicewrapper-config.ini"

- name: Kublet | Set Kublet service failure command
  win_shell: >-
    sc.exe failure kubelet reset=40 actions=restart/0/restart/0/run/30000
    command="powershell.exe Move-Item
    \\\`"{{ install_path }}/kubelet.log\\\`"
    \\\`"{{ install_path }}/kubelet.log_`$(Get-Date -f yyyy-MM-dd-hh-mm-ss)\\\`";
    Restart-Service kubelet"

- name: Kublet | Enable Kublet service failure flags
  win_shell: sc.exe failureflag kubelet 1

- name: Flanneld | Check if flanneld is installed
  win_service:
    name: flanneld
  register: flanneld_service

- name: Flanneld | Remove flanneld service if it exists
  win_service:
    name: flanneld
    state: absent
  when: flanneld_service.exists

- name: Flaneeld | Remove existing service wrapper config file
  win_file:
    state: absent
    path: '{{ install_path }}\flanneld-servicewrapper-config.ini'

- name: Flanneld | Create the new service wrapper config file
  win_lineinfile:
    path: '{{ install_path }}\flanneld-servicewrapper-config.ini'
    create: yes
    line: >
      log-file={{ install_path }}/flanneld.log

      service-name=flanneld

      service-command="{{ install_path }}\\flanneld.exe"
      --kubeconfig-file=C:\k\config --iface={{ host_public_ip }}
      --ip-masq=1 --kube-subnet-mgr=1

- name: Flanneld | Create Flanneld Windows service
  win_service:
    name: flanneld
    display_name: Flannel daemon
    description: Flannel doaemon for Kubernetes
    path: >-
      "{{ install_path }}\servicewrapper.exe" --config "{{ install_path }}\flanneld-servicewrapper-config.ini"

- name: Flanneld | Set flanneld service failure command
  win_shell: >-
    sc.exe failure flanneld reset=40 actions=restart/0/restart/0/run/30000
    command="powershell.exe Move-Item
    \\\`"{{ install_path }}/flanneld.log\\\`"
    \\\`"{{ install_path }}/flanneld.log_`$(Get-Date -f yyyy-MM-dd-hh-mm-ss)\\\`";
    Restart-Service flanneld"

- name: Flanneld | Enable flanneld service failure flags
  win_shell: sc.exe failureflag flanneld 1

- name: Flanneld | Set env variables
  win_environment:
    state: present
    name: "NODE_NAME"
    value: "{{ ansible_hostname | lower }}"
    level: machine

- name: Kubelet | Start service kubelet
  win_service:
    name: kubelet
    start_mode: auto
    state: started

- name: Kubelet | Let kubelet register itself properly
  pause:
    seconds: 20

- name: Flanneld | Start service flanneld
  win_service:
    name: flanneld
    start_mode: auto
    state: started

- name: Kubernetes | Get source vip
  win_shell: |
    cd "{{ install_path }}"
    ipmo "{{ helper_module_path }}"
    GetSourceVip -ipAddress "{{ host_public_ip }}" -NetworkName "{{ networkName }}"
    $sourceVipJSON = Get-Content sourceVip.json | ConvertFrom-Json
    $sourceVip = $sourceVipJSON.ip4.ip.Split("/")[0]
    $sourceVip
  register: cmd_output
  when: FLANNEL_MODE == "overlay"

- name: Kubernetes | Set source vip fact
  set_fact:
    source_vip: "{{ cmd_output.stdout | trim }}"
  when: FLANNEL_MODE == "overlay"

- name: Kubelet | Restart service kubelet
  win_service:
    name: kubelet
    start_mode: auto
    state: restarted

- name: Kube-proxy | Check if kube-proxy is installed
  win_service:
    name: kube-proxy
  register: kube_proxy_service

- name: Kube-proxy | Remove kubelet service if it exists
  win_service:
    name: kube-proxy
    state: absent
  when: kube_proxy_service.exists

- name: Kube-proxy | Remove existing service wrapper config file
  win_file:
    state: absent
    path: '{{ install_path }}\kube-proxy-servicewrapper-config.ini'

- name: Kube-proxy | Create the new service wrapper config file
  win_lineinfile:
    path: '{{ install_path }}\kube-proxy-servicewrapper-config.ini'
    create: yes
    line: >
      log-file={{ install_path }}/kube-proxy.log

      service-name=kube-proxy

      service-command="{{ install_path }}\\kube-proxy.exe"
      --v=4 --proxy-mode=kernelspace 
      --hostname-override="{{ ansible_hostname }}"
      --feature-gates="WinOverlay=true"
      --kubeconfig=c:\k\config
      --network-name="vxlan0" --enable-dsr=false
      --source-vip="{{ source_vip }}"
      --cluster-cidr="{{ kubernetes_info.CLUSTER_SUBNET }}"
  when: FLANNEL_MODE == "overlay"

- name: Kube-proxy | Create the new service wrapper config file
  win_lineinfile:
    path: '{{ install_path }}\kube-proxy-servicewrapper-config.ini'
    create: yes
    line: >
      log-file={{ install_path }}/kube-proxy.log

      service-name=kube-proxy

      service-command="{{ install_path }}\\kube-proxy.exe"
      --v=4 --proxy-mode=kernelspace 
      --hostname-override="{{ ansible_hostname }}"
      --kubeconfig=c:\k\config
      --feature-gates="WinDSR=false"
      --network-name="cbr0" --enable-dsr=false
      --cluster-cidr="{{ kubernetes_info.CLUSTER_SUBNET }}"
  when: FLANNEL_MODE == "host-gw"

- name: Kube-proxy | Create Kube-proxy Windows service
  win_service:
    name: kube-proxy
    display_name: Kubernetes Kube-proxy
    description: Kubernetes Kube-proxy service
    path: >-
      "{{ install_path }}\servicewrapper.exe" --config "{{ install_path }}\kube-proxy-servicewrapper-config.ini"

- name: Kube-proxy | Set Kube-proxy service failure command
  win_shell: >-
    sc.exe failure kube-proxy reset=40 actions=restart/0/restart/0/run/30000
    command="powershell.exe Move-Item
    \\\`"{{ install_path }}/kube-proxy.log\\\`"
    \\\`"{{ install_path }}/kube-proxy.log_`$(Get-Date -f yyyy-MM-dd-hh-mm-ss)\\\`";
    Restart-Service kube-proxy"

- name: Kube-proxy | Enable Kube-proxy service failure flags
  win_shell: sc.exe failureflag kube-proxy 1

- name: Kube-proxy | Start service kube-proxy
  win_service:
    name: kube-proxy
    start_mode: auto
    state: started
